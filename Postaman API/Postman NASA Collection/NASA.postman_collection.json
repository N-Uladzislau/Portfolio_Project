{
	"info": {
		"_postman_id": "0749e8f6-2dc6-4305-b503-6477b414b996",
		"name": "NASA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23272772"
	},
	"item": [
		{
			"name": "Real",
			"item": [
				{
					"name": "APOD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {\r",
									"    tests[\"Backend is available, response code is 200\"] = true;\r",
									"}   else if (responseCode.code === 401) {\r",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
									"}   else if (responseCode.code === 403) {\r",
									"    tests[\"Forbiden\"] = false;\r",
									"}   else if (responseCode.code === 404) {\r",
									"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
									"}   else if (responseCode.code === 422) {\r",
									"    tests[\"The instance is not valid\"] = false;\r",
									"}   else if (responseCode.code === 400) {\r",
									"    tests[\"Bad Requset\"] = false; \r",
									"}   else {\r",
									"    tests[\"Something won't wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"// response Time\r",
									"tests[\"Response Time Acceptable\"] = responseTime < 500;\r",
									"\r",
									"//response Size\r",
									"pm.test(\"Response Size is less than 2KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"// Test Header\r",
									"pm.test(\"Header is present\", function () {\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"X-Frame-Options\", \"DENY\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"// Type of Body\r",
									"pm.test(\"Response Type of Body\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.date).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.explanation).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.hdurl).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.media_type).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.url).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.service_version).to.be.a(\"string\");\r",
									"    pm.response.to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Reponse Body Tests\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"\r",
									"// Compair KEYS / VALUE\r",
									"pm.test(\"Body Compair KEYS / VALUE \", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.date).to.eql(pm.environment.get(\"DATE\"));\r",
									"    pm.expect(jsonData.explanation).to.eql(pm.environment.get(\"EXPLANATION\"));\r",
									"    pm.expect(jsonData.hdurl).to.eql(pm.environment.get(\"HDURL\"));\r",
									"    pm.expect(jsonData.media_type).to.eql(pm.environment.get(\"MEDIA\"));\r",
									"    pm.expect(jsonData.service_version).to.eql(pm.environment.get(\"SERVICE_V\"));\r",
									"    pm.expect(jsonData.title).to.eql(pm.environment.get(\"TITLE\"));\r",
									"    pm.expect(jsonData.url).to.eql(pm.environment.get(\"URL\"));\r",
									"});\r",
									"\r",
									"// Test Body Value is present ! \r",
									"pm.test(\"Check Response Value \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EXPLANATION\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"DATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"HDURL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"MEDIA\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SERVICE_V\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"TITLE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"URL\"));\r",
									"});\r",
									" \r",
									" // Test Body Keys is present ! \r",
									"pm.test(\"Body contains KEYS string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"date\");\r",
									"    pm.expect(pm.response.text()).to.include(\"explanation\");\r",
									"    pm.expect(pm.response.text()).to.include(\"hdurl\");\r",
									"    pm.expect(pm.response.text()).to.include(\"media_type\");\r",
									"    pm.expect(pm.response.text()).to.include(\"service_version\");\r",
									"    pm.expect(pm.response.text()).to.include(\"title\"); \r",
									"    pm.expect(pm.response.text()).to.include(\"url\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.nasa.gov/planetary/apod?api_key={{api_key}}&date=2022-09-17",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"planetary",
								"apod"
							],
							"query": [
								{
									"key": "api_key",
									"value": "{{api_key}}"
								},
								{
									"key": "date",
									"value": "1995-06-19",
									"disabled": true
								},
								{
									"key": "date",
									"value": "2022-09-17"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mars Rover",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 404:\r",
									"        tests[\"404 Not found\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 BUnauthorized\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 Internal Server Error\"] = false;\r",
									"        break;\r",
									"    case 503:\r",
									"        tests[\"503 Server unavailable\"] = false;\r",
									"        break;\r",
									"    case 502:\r",
									"        tests[\"502 bad gateway\"] = false;\r",
									"        break;\r",
									"    case 599:\r",
									"        tests[\"599 Network connect timeout error\"] = false;\r",
									"        break;\r",
									"    case 408:\r",
									"        tests[\"408 Request is timeout\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"\r",
									"// Test Time\r",
									"tests[\"Response Time Acceptable\"] = responseTime < 1000;\r",
									"\r",
									"// Test Size \r",
									"pm.test(\"Response Size is less than 2KB\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"// Test Value is correct\r",
									"pm.test(\"Response Value is Correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"SOL\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"FULL_NAME\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"NAME\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ROV_ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"IMG_SRC\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"EARTH_DATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LANDING\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LAUNCH\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"STATUS\"));\r",
									"});\r",
									"\r",
									"// Body DATA of FHAZ \r",
									"pm.test(\"Compait KEYS / Value Rover Camera 'FHAZ'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.photos.img_src).to.eql(pm.environment.get(\"tp://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG\"))\r",
									"    pm.expect(jsonData.photos.earth_date).to.eql(pm.environment.get(\"2015-05-30\"));\r",
									"    pm.expect(jsonData.photos.id).to.eql(pm.environment.get(102693));\r",
									"    pm.expect(jsonData.photos.sol).to.eql(pm.environment.get(1000));\r",
									"});\r",
									"\r",
									"// Body to type of \r",
									"pm.test(\"Response Type of Body\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.photos).to.be.a(\"array\");\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Connection\", \"close\");\r",
									"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
									"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"// Response JSON OK\r",
									"pm.test(\"Response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"photos\": [\r\n        {\r\n            \"id\": 102693,\r\n            \"sol\": 1000,\r\n            \"camera\": {\r\n                \"id\": 20,\r\n                \"name\": \"FHAZ\",\r\n                \"rover_id\": 5,\r\n                \"full_name\": \"Front Hazard Avoidance Camera\"\r\n            },\r\n            \"img_src\": \"http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG\",\r\n            \"earth_date\": \"2015-05-30\",\r\n            \"rover\": {\r\n                \"id\": 5,\r\n                \"name\": \"Curiosity\",\r\n                \"landing_date\": \"2012-08-06\",\r\n                \"launch_date\": \"2011-11-26\",\r\n                \"status\": \"active\"\r\n            }\r\n        },\r\n        {\r\n            \"id\": 102694,\r\n            \"sol\": 1000,\r\n            \"camera\": {\r\n                \"id\": 20,\r\n                \"name\": \"FHAZ\",\r\n                \"rover_id\": 5,\r\n                \"full_name\": \"Front Hazard Avoidance Camera\"\r\n            },\r\n            \"img_src\": \"http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FRB_486265257EDR_F0481570FHAZ00323M_.JPG\",\r\n            \"earth_date\": \"2015-05-30\",\r\n            \"rover\": {\r\n                \"id\": 5,\r\n                \"name\": \"Curiosity\",\r\n                \"landing_date\": \"2012-08-06\",\r\n                \"launch_date\": \"2011-11-26\",\r\n                \"status\": \"active\"\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&camera=FHAZ&api_key={{api_key}}",
							"protocol": "https",
							"host": [
								"api",
								"nasa",
								"gov"
							],
							"path": [
								"mars-photos",
								"api",
								"v1",
								"rovers",
								"curiosity",
								"photos"
							],
							"query": [
								{
									"key": "sol",
									"value": "1000"
								},
								{
									"key": "camera",
									"value": "FHAZ"
								},
								{
									"key": "api_key",
									"value": "{{api_key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "qTNo-7DdurwGXW7gihRb88FRINBEAn663ZXES8horrs.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA5LTIzVDE5OjEzOjIwLjc5NloiLCJ1aWQiOiI0NjQ2MjJlMi0zOWQ5LTQ4NTctOTA5Zi0wNzNlMDYzODU1ZDkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImQ3YTAwNTljLTFhODUtNDFkMS05ZDVhLTRlZmY5MTA2NjAzZSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wOS0yM1QyMzoxMzoyMC43OTZaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}